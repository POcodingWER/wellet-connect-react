import React,{useState,useEffect,useCallback} from 'react'
import CaverExtKAS from'caver-js-ext-kas'
import Caver from'caver-js'
import MyToken from'./abi/MyToken.json'
import KIP17 from'./abi/OwnableKIP17.json'
import MinterKIP17 from'./abi/MinterKIP17.json'
import changeNft from'./abi/changeNft.json'

const accessKeyId = "";
const secretAccessKey = "";
const chainId = window.klaytn.networkVersion // for Baobab; 8217 if Cypress
const caver = new Caver(window.klaytn);
let caverExtKAS

if(accessKeyId===""||secretAccessKey===""){   //kasAPI
    caverExtKAS = new Caver(window.klaytn);
  }else{
    caverExtKAS = new CaverExtKAS(chainId, accessKeyId, secretAccessKey);
}
// const arry = [100059152,
//   100068763,
//   100068789,
//   100068812,
//   100068834,
//   100080675,
//   100081270,
//   100090103,
//   100091000,
//   100092925,
//   100092946,
//   100092967,
//   100092992,
//   100093024,
//   100093989,
//   100100718,
//   100100915,
//   100102199,
//   100103119,
//   100103320,
//   100105462,
//   100106750,
//   100106859,
//   100108064,
//   100108976,
//   100109862,
//   100109880,
//   100109905,
//   100110939,
//   100110976,
//   100110990,
//   100111124,
//   100111168,
//   100111195,
//   100111948,
//   100112550,
//   100112618,
//   100113264,
//   100113909,
//   100114726,
//   100116442,
//   100116750,
//   100116856,
//   100117366,
//   100117415,
//   100117481,
//   100118457,
//   100118648,
//   100119261,
//   100119775,
//   100120570,
//   100121151,
//   100121487,
//   100121494,
//   100121502,
//   100121516,
//   100121574,
//   100121596,
//   100121642,
//   100121663,
//   100121967,
//   100122082,
//   100122090,
//   100122700,
//   100124640,
//   100125051,
//   100125082,
//   100125247,
//   100125356,
//   100126396,
//   100126792,
//   100127058,
//   100127458,
//   100127828,
//   100127967,
//   100128030,
//   100128098,
//   100128130,
//   100128258,
//   100128287,
//   100128340,
//   100128344,
//   100128529,
//   100128554,
//   100128656,
//   100128671,
//   100128713,
//   100128753,
//   100128820,
//   100128830,
//   100128870,
//   100128892,
//   100128914,
//   100128974,
//   100128978,
//   100129081,
//   100129095,
//   100129117,
//   100129118,
//   100129193,
//   100129231,
//   100129239,
//   100129270,
//   100129286,
//   100129563,
//   100129655,
//   100129655,
//   100129736,
//   100129779,
//   100129813,
//   100129839,
//   100129877,
//   100129914,
//   100129998,
//   100130135,
//   100130209,
//   100130265,
//   100130294,
//   100130305,
//   100130319,
//   100130334,
//   100130366,
//   100130398,
//   100130429,
//   100130431,
//   100130439,
//   100130463,
//   100130495,
//   100130530,
//   100130539,
//   100130552,
//   100130577,
//   100130597,
//   100130644,
//   100130673,
//   100130686,
//   100130732,
//   100130906,
//   100130962,
//   100131031,
//   100131135,
//   100131161,
//   100131232,
//   100131327,
//   100131401,
//   100131548,
//   100131576,
//   100131609,
//   100131613,
//   100131875,
//   100132057,
//   100132142,
//   100132151,
//   100132182,
//   100132383,
//   100132406,
//   100132458,
//   100132729,
//   100132734,
//   100132742,
//   100132768,
//   100132778,
//   100132788,
//   100132841,
//   100132904,
//   100132929,
//   100132992,
//   100132997,
//   100133042,
//   100133077,
//   100133248,
//   100133498,
//   100133508,
//   100133522,
//   100133638,
//   100133643,
//   100133655,
//   100133656,
//   100133710,
//   100133822,
//   100133858,
//   100133864,
//   100133871,
//   100133879,
//   100133884,
//   100133889,
//   100133901,
//   100133902,
//   100133907,
//   100133918,
//   100133929,
//   100134245,
//   100134416,
//   100134579,
//   100134589,
//   100134645,
//   100134659,
//   100134716,
//   100134722,
//   100134934,
//   100134939,
//   100135047,
//   100135104,
//   100135138,
//   100135291,
//   100135355,
//   100135366,
//   100135373,
//   100135383,
//   100135391,
//   100135516,
//   100135537,
//   100135591,
//   100135623,
//   100135660,
//   100135730,
//   100135865,
//   100135921,
//   100135932,
//   100135957,
//   100136058,
//   100136112,
//   100136210,
//   100136250,
//   100136272,
//   100136503,
//   100136633,
//   100136864,
//   100137060,
//   100137075,
//   100137185,
//   100137240,
//   100137249,
//   100137271,
//   100137272,
//   100137297,
//   100137325,
//   100137346,
//   100137358,
//   100137389,
//   100137415,
//   100137460,
//   100137495,
//   100137517,
//   100137529,
//   100137556,
//   100137650,
//   100137734,
//   100137827,
//   100137911,
//   100137996,
//   100138066,
//   100138079,
//   100138110,
//   100138113,
//   100138137,
//   100138144,
//   100138151,
//   100138165,
//   100138183,
//   100138198,
//   100138294,
//   100138318,
//   100138328,
//   100138428,
//   100138765,
//   100138983,
//   100139029,
//   100139161,
//   100139178,
//   100139185,
//   100139278,
//   100139287,
//   100139761,
//   100140037,
//   100140374,
//   100140456,
//   100140584,
//   100140785,
//   100140850,
//   100141038,
//   100141151,
//   100141180,
//   100141234,
//   100141257,
//   100141288,
//   100141432,
//   100141451,
//   100141473,
//   100141544,
//   100142475,
//   100142663,
//   100142895,
//   100142897,
//   100142938,
//   100143404,
//   100143721,
//   100143969,
//   100144911,
//   100145242,
//   100145788,
//   100146088,
//   100146094,
//   100146100,
//   100146132,
//   100146164,
//   100146179,
//   100146184,
//   100146268,
//   100146354,
//   100146395,
//   100146456,
//   100146622,
//   100146632,
//   100146657,
//   100147043,
//   100147058,
//   100147125,
//   100147441,
//   100147927,
//   100148261,
//   100148943,
//   100148999,
//   100149037,
//   100149056,
//   100149564,
//   100149650,
//   100150123,
//   100150421,
//   100151203,
//   100152592,
//   100154032,
//   100156626,
//   100156646,
//   100156668,
//   100156698,
//   100156746,
//   100156768,
//   100157148,
//   100166694,
//   100170337,
//   100173564,
//   100174323,
//   100175060,
//   100175307,
//   100175768,
//   100175866,
//   100176742,
//   100177498,
//   100177535,
//   100178218,
//   100179003,
//   100179465,
//   100180364,
//   100180758,
//   100181108,
//   100181731,
//   100182807,
//   100182815,
//   100184316,
//   100185980,
//   100186286,
//   100186462,
//   100187235,
//   100187884,
//   100187957,
//   100188111,
//   100188529,
//   100188838,
//   100190097,
//   100191370,
//   100193739,
//   100193773,
//   100194252,
//   100200452,
//   100200888,
//   100201874,
//   100201926,
//   100205555,
//   100205723,
//   100205831,
//   100206885,
//   100210048,
//   100211008,
//   100211688,
//   100211697,
//   100212227,
//   100215049,
//   100220396,
//   100220522,
//   100221009,
//   100221343,
//   100221703,
//   100221714,
//   100221749,
//   100223378,
//   100223406,
//   100223428,
//   100224917,
//   100224959,
//   100224980,
//   100225473,
//   100225489,
//   100227017,
//   100232447,
//   100233130,
//   100234500,
//   100235764,
//   100235838,
//   100243425,
//   100246406,
//   100250199,
//   100250232,
//   100250258,
//   100250289,
//   100250347,
//   100250371,
//   100250395,
//   100250422,
//   100250444,
//   100250466,
//   100250490,
//   100250514,
//   100250542,
//   100250571,
//   100250594,
//   100250618,
//   100250641,
//   100250670,
//   100250959,
//   100250979,
//   100251000,
//   100251021,
//   100251049,
//   100251075,
//   100251098,
//   100251120,
//   100251335,
//   100251356,
//   100251378,
//   100251405,
//   100251427,
//   100251454,
//   100251479,
//   100251511,
//   100251533,
//   100252034,
//   100252220,
//   100252245,
//   100252272,
//   100252330,
//   100252381,
//   100252402,
//   100252428,
//   100252448,
//   100252506,
//   100252901,
//   100257005,
//   100258184,
//   100258508,
//   100258836,
//   100259187,
//   100260234,
//   100260255,
//   100260289,
//   100260310,
//   100260330,
//   100260351,
//   100260374,
//   100260399,
//   100260420,
//   100260442,
//   100260467,
//   100260490,
//   100260511,
//   100260534,
//   100260793,
//   100260944,
//   100261683,
//   100261706,
//   100262653,
//   100264188,
//   100265192,
//   100269605,
//   100273302,
//   100273967,
//   100274000,
//   100279110,
//   100279814,
//   100285699,
//   100299083,
//   100301429,
//   100305224,
//   100307103,
//   100314029,
//   100314139,
//   100319544,
//   100321229,
//   100324514,
//   100327813,
//   100328654,
//   100328845,
//   100329000,
//   100334902,
//   100343223,
//   100346514,
//   100346621,
//   100349375,
//   100349404,
//   100349439,
//   100349461,
//   100349728,
//   100351514,
//   100351522,
//   100351536,
//   100351542,
//   100351550,
//   100351557,
//   100355082,
//   100358148,
//   100360284,
//   100360337,
//   100360366,
//   100360524,
//   100360593,
//   100366903,
//   100371927,
//   100374246,
//   100377471,
//   100377523,
//   100377867,
//   100377876,
//   100379753,
//   100380104,
//   100388701,
//   100388744,
//   100388765,
//   100388809,
//   100388899,
//   100388924,
//   100391542,
//   100391647,
//   100392075,
//   100393110,
//   100397350,
//   100397642,
//   100401301,
//   100401325,
//   100402057,
//   100404812,
//   100406877,
//   100407284,
//   100407290,
//   100407298,
//   100407306,
//   100407314,
//   100407331,
//   100408988,
//   100411413,
//   100419199,
//   100427923,
//   100427956,
//   100428074,
//   100432147,
//   100432367,
//   100435415,
//   100435424,
//   100435434,
//   100435571,
//   100439110,
//   100439424,
//   100439431,
//   100441375,
//   100442234,
//   100444317,
//   100444327,
//   100444743,
//   100444753,
//   100444762,
//   100445386,
//   100448990,
//   100454297,
//   100454305,
//   100454326,
//   100454598,
//   100458241,
//   100459843,
//   100460180,
//   100464810,
//   100467354,
//   100467461,
//   100467469,
//   100468281,
//   100476941,
//   100477017,
//   100479255,
//   100480396,
//   100480487,
//   100481210,
//   100481241,
//   100481288,
//   100481332,
//   100481381,
//   100481472,
//   100481532,
//   100481830,
//   100481995,
//   100483130,
//   100487802,
//   100491241,
//   100493101,
//   100493145,
//   100493208,
//   100493307,
//   100493338,
//   100493480,
//   100493513,
//   100512113,
//   100512149,
//   100512186,
//   100517011,
//   100522400,
//   100523099,
//   100524682,
//   100527183,
//   100530777,
//   100530901,
//   100531436,
//   100537989,
//   100539982,
//   100550139,
//   100550319,
//   100551519,
//   100552178,
//   100556026,
//   100558844,
//   100567834,
//   100570010,
//   100571351,
//   100571353,
//   100573697,
//   100576430,
//   100578966,
//   100578996,
//   100579048,
//   100579613,
//   100579654,
//   100579698,
//   100581025,
//   100585134,
//   100611403,
//   100611657,
//   100611685,
//   100613418,
//   100620035,
//   100620060,
//   100620072,
//   100623087,
//   100624654,
//   100624918,
//   100627683,
//   100640921,
//   100640982,
//   100641025,
//   100641152,
//   100644362,
//   100646129,
//   100648001,
//   100648082,
//   100648145,
//   100648804,
//   100652197,
//   100653903,
//   100656088,
//   100657062,
//   100658760,
//   100667173,
//   100668058,
//   100684950,
//   100684982,
//   100685007,
//   100707008,
//   100708269,
//   100708458,
//   100709691,
//   100720226,
//   100725325,
//   100725351,
//   100725384,
//   100734956,
//   100734997,
//   100735014,
//   100735040,
//   100735056,
//   100736842,
//   100736869,
//   100738605,
//   100743152,
//   100745804,
//   100785119,
//   100785261,
//   100788292,
//   100788309,
//   100797448,
//   100802065,
//   100803375,
//   100807223,
//   100815344,
//   100830729,
//   100863093,
//   100869219,
//   100869622,
//   100884297,
//   100884440,
//   100907331,
//   100932111,
//   100937316,
//   100937345,
//   100939533,
//   100946747,
//   100946939,
//   100947077,
//   100947531,
//   100947561,
//   100956274,
//   100958990,
//   100960533,
//   100960580,
//   100962471,
//   100997786,
//   101044157,
//   101044378,
//   101059105,
//   101064905,
//   101069585,
//   101082400,
//   101087157,
//   101087174,
//   101087187,
//   101087199,
//   101090691,
//   101091448,
//   101103475,
//   101129344,
//   101137176,
//   101147291,
//   101164987,
//   101165011,
//   101165026,
//   101167182,
//   101167331,
//   101167465,
//   101167816,
//   101168263,
//   101173412,
//   101180877,
//   101180915,
//   101205807,
//   101205828,
//   101205862,
//   101205884,
//   101218251,
//   101218283,
//   101224951,
//   101235323,
//   101235433,
//   101238760,
//   101238973,
//   101239282,
//   101279047,
//   101295218,
//   101295248,
//   101299838,
//   101312349,
//   101322930,
//   101323003,
//   101324945,
//   101326534,
//   101326732,
//   101332332,
//   101332387,
//   101332410,
//   101332427,
//   101337122,
//   101339120,
//   101339212,
//   101342590,
//   101348926,
//   101349123,
//   101349814,
//   101349824,
//   101349832,
//   101349839,
//   101349847,
//   101349858,
//   101349995,
//   101350004,
//   101350022,
//   101350030,
//   101350155,
//   101350164,
//   101359328,
//   101367573,
//   101367597,
//   101367609,
//   101372881,
//   101372891,
//   101372906,
//   101393800,
//   101393812,
//   101393822,
//   101393832,
//   101393841,
//   101396693,
//   101396834,
//   101396870,
//   101396893,
//   101398208,
//   101398264,
//   101424448,
//   101424460,
//   101427422,
//   101433970,
//   101433979,
//   101438560,
//   101438597,
//   101438623,
//   101474399,
//   101474418,
//   101474438,
//   101474510,
//   101474550,
//   101481877,
//   101524635,
//   101530830,
//   101530839,
//   101530912,
//   101530959,
//   101530966,
//   101532657,
//   101534025,
//   101565975,
//   101566014,
//   101566035,
//   101566052,
//   101566070,
//   101566136,
//   101566252,
//   101566271,
//   101566292,
//   101566312,
//   101566338,
//   101569983,
//   101571204,
//   101572308,
//   101573661,
//   101583650,
//   101592134,
//   101603482,
//   101615277,
//   101615674,
//   101622694,
//   101644894,
//   101644913,
//   101644923,
//   101645782,
//   101649517,
//   101652620,
//   101654964,
//   101655031,
//   101655077,
//   101655141,
//   101655189,
//   101684303,
//   101684320,
//   101696186,
//   101700685,
//   101706891,
//   101706905,
//   101706921,
//   101707006,
//   101720676,
//   101732172,
//   101732223,
//   101767623,
//   101769929,
//   101769957,
//   101770006,
//   101770030,
//   101773846,
//   101792663,
//   101805996,
//   101828363,
//   101830215,
//   101833945,
//   101834950,
//   101836853,
//   101836961,
//   101844518,
//   101846063,
//   101849339,
//   101851694,
//   101851863,
//   101858259,
//   101858329,
//   101858440,
//   101858494,
//   101863411,
//   101864068,
//   101869226,
//   101869718,
//   101870356,
//   101870413,
//   101872583,
//   101872643,
//   101873626,
//   101902432,
//   101908156,
//   101912741,
//   101916417,
//   101918941,
//   101919268,
//   101932382,
//   101932407,
//   101935502,
//   101939170,
//   101940387,
//   101940572,
//   101941722,
//   101950693,
//   101962415,
//   101963130,
//   101963143,
//   101981899,
//   101981927,
//   101981970,
//   101988197,
//   101988228,
//   101988301,
//   101988335,
//   101988365,
//   101989537,
//   101992585,
//   101994867,
//   102011481,
//   102012802,
//   102014764,
//   102020147,
//   102022499,
//   102030362,
//   102030484,
//   102030578,
//   102030607,
//   102030710,
//   102030746,
//   102030798,
//   102030846,
//   102030862,
//   102030893,
//   102030909,
//   102030949,
//   102030983,
//   102032988,
//   102033014,
//   102033036,
//   102044734,
//   102049179,
//   102072448,
//   102083972,
//   102086503,
//   102114743,
//   102114831,
//   102119731,
//   102130818,
//   102130846,
//   102130864,
//   102130876,
//   102130892,
//   102131072,
//   102131087,
//   102131129,
//   102131150,
//   102186057,
//   102203546,
//   102212032,
//   102217048,
//   102217751,
//   102218619,
//   102219343,
//   102222096,
//   102222135,
//   102250026,
//   102256143,
//   102261450,
//   102267212,
//   102267441,
//   102267455,
//   102267694,
//   102268991,
//   102269000,
//   102269009,
//   102269018,
//   102269036,
//   102270267,]
function Test() {
  const [csvfile, setCsvfile] = useState()
  const cotractAddress ='0x313b28ba15a318338f81ae49373e3cca6ba21fbe'

  const connectklaytnWellet = async() =>{
    const klaytnConnectSuccess = await window.klaytn.enable(); //지갑연결
    if(klaytnConnectSuccess){   //연결되면
      console.log('현제 지갑주소 :', klaytnConnectSuccess);
      console.log('네트워크 넘버 :',window.klaytn.networkVersion, window.klaytn.networkVersion===1001?'Testnet':'MainNet' );
      console.log('선택한 지갑주소:', window.klaytn.selectedAddress);
    }
  }

  const getGasFee = async (amount) => {
    const base = 7311325;
    const percount = 184800;
    return Math.ceil((base + amount * percount) * 1.2);
  };

  const 연속민트 = async () => {
    const senderKeyring = await caver.wallet.keyring.create(
      "공개키",
      "비밀키"
    );
    caver.wallet.add(senderKeyring);
    const sendContract = new caver.contract.create(  //자동
    changeNft.abi,
      "0xFef3e0f9B76C2fcA3dC17d50CCD2372EA83d0f3D");
    // const gas = await sendContract.methods
    //   .NFTReveal([])
    //   .estimateGas({
    //     from: senderKeyring.address,
    //     });
    // 2,401

    for (let i = 0; i < 10000; i+=10 ) {
      //20개잡고하면될듯  처음가스비 2328492  6389212 error 8000000미만으로 나오게 설정해야될듯
      const gas = await sendContract.methods
      .NFTReveal([i,i+1,i+2,i+3,i+4,i+5,i+6,i+7,i+8,i+9])
      .estimateGas({
        from: senderKeyring.address,
        });
        console.log(gas);
      const receipt = await sendContract.send(
        {
          from: senderKeyring.address,
          gas:gas,
        },
        "NFTReveal", //메소드
        [i,i+1,i+2,i+3,i+4,i+5,i+6,i+7,i+8,i+9],
        );
        console.log(gas,i,receipt);
        // const saleInfo = await sendContract.methods.isOpen().call();
        // console.log(i,receipt.events);

        // if (map1.get(receipt)) {
        //   console.log('있음',i,receipt);
        //   break;
        // }
        // map1.set(receipt,i)
    }
  };

  const mint = async ()=>{    //가스비계산 통신 2번
    console.log('지갑연결유무:', window.klaytn.selectedAddress);
    const contract = new caverExtKAS.klay.Contract(KIP17.abi, cotractAddress);
    const balance = await contract.methods.totalSupply().call()
    
    console.log('보유토큰',balance); 

    const gas = await contract.methods
      .mintWithTokenURI(window.klaytn.selectedAddress,balance,'naver.com')
      .estimateGas({
        from: window.klaytn.selectedAddress,
        });
    console.log(gas);
    
    const aprove = await contract.methods
      .mintWithTokenURI(window.klaytn.selectedAddress,balance,'naver.com')
      .send({
        from: window.klaytn.selectedAddress,
        gas
        });
      console.log(aprove);
  }

  const mint2 = async ()=>{   //계산없이 통신 1번
    const tokenValue =  caverExtKAS.utils.toPeb(110, 'KLAY')        //faovr 얼마로 할지

    const contract = new caverExtKAS.klay.Contract(KIP17.abi, cotractAddress);
    const balance = await contract.methods.totalSupply().call()
    
    console.log(tokenValue);
    console.log('보유토큰',balance); 

    const data = await contract.methods
      .mintWithTokenURI(window.klaytn.selectedAddress,balance,'naver.com')
      .encodeABI();
    console.log(data);

    const params = {
      type: "SMART_CONTRACT_EXECUTION",
      from: caverExtKAS.utils.toChecksumAddress(window.klaytn.selectedAddress),   //보내는사람주소
      to: caverExtKAS.utils.toChecksumAddress(cotractAddress),  //컨트랙트주소
      data,
    }
    
    const res = await caver.klay.sendTransaction({
      ...params,
      gas:1829110,
     });
    console.log(res);
  }

  const noSignSendTx = async () => {   //사인없이 트잭보내기
    /** 키링생성 */
    const senderKeyring = await caver.wallet.keyring.create(
      
    );
    console.log(senderKeyring);
    caver.wallet.add(senderKeyring);
    /** mint1, mint2 랑다름 caver.contract.create을해야 안에 _wallet이 추가되어 있음*/
    const contract = new caver.contract.create(KIP17.abi, cotractAddress);
    console.log(contract);
    const balance = await contract.methods.totalSupply().call();
    const receipt = await contract.send(
      {
        from: senderKeyring.address,
        gas: 1000000,
      },
      "mintWithTokenURI", //메소드
      senderKeyring.address,
      balance,
      "naver.com"
    );
    console.log('생성txHash :',receipt.transactionHash);    //딜레이가 조금생김
  };

  const findTokenNum = async () => {
    console.log("지갑연결유무:", window.klaytn.selectedAddress);
    const contract = new caverExtKAS.klay.Contract(KIP17.abi, cotractAddress);
    
    const balance = await contract.methods.totalSupply().call();
    console.log("총발행 토큰", balance);

    let countNFT = await contract.methods
      .balanceOf(window.klaytn.selectedAddress)
      .call();
      console.log('보유개수',countNFT);
    let nftTokenIdArray = [];
    for (let i = 0; i < countNFT; i++) {
      nftTokenIdArray.push(
        await contract.methods
          .tokenOfOwnerByIndex(window.klaytn.selectedAddress, i)
          .call()
      );
    }
    console.log('보유토큰 num: ', nftTokenIdArray);
  };

  const 뽑기 = async () => {
    console.log("지갑연결유무:", window.klaytn.selectedAddress);
    const contract = new caverExtKAS.klay.Contract(KIP17.abi, '0xce70eef5adac126c37c8bc0c1228d48b70066d03');
    
    const balance = await contract.methods.balanceOf('0x0b0cd3a57dc9cedf3763e16e3d156dd71dae15f7').call();
    console.log("총발행 토큰", balance);

    let nftBox =[]
    for (let i = 0; i < 1; i++) {
      const nftNum = await contract.methods.tokenOfOwnerByIndex('0x0b0cd3a57dc9cedf3763e16e3d156dd71dae15f7',i).call();
      nftBox.push(nftNum)
      
      const metadata = `https://belly.bellygom.world/${nftNum}.json`
      fetch(metadata, { method : "GET"})
      .then((res) => res.json())
      .then(res => {                        //실제 데이터를 상태변수에 업데이트
        console.log(1, res);
    });
    }
    console.log(nftBox.length,nftBox);
    // let countNFT = await contract.methods
    //   .setApprovalForAll('0xFef3e0f9B76C2fcA3dC17d50CCD2372EA83d0f3D',1)
    //   .send( {from: window.klaytn.selectedAddress,gas:100000});
    //   console.log('보유개수',countNFT);
  };

  const ttttttt = async () => {
    const csvArry = csvfile.split('\n'); 
    const strDel = (str)=>{   //따옴표삭제
      let result = str.replace(/\"/g,''); 
      return result;
    }

    const numLength = csvArry.length;
    let makeCsv = `id, address, logDate, block, unixTime, type, hash, chain, symbol, from, to, value, fee, logIndex\r\n`;
    for (let i = 1; i < numLength; i++) {
      console.log(i); 
      const a = csvArry[i].split(',');
      const hash = strDel(a[0]);
      const block = await strDel(a[1]);
      const logDate = strDel(a[2]);
      const from = strDel(a[3]);
      const to = strDel(a[4]);
      const value = strDel(a[5]);
      const symbol = strDel(a[8]);
      const unixTime =await new caverExtKAS.rpc.klay.getBlock(block).then(res=>parseInt(res.timestamp,16));
      console.log(unixTime,hash,block,logDate,from,to,value,symbol);
      makeCsv +=`${i},${to},${logDate},${block},${unixTime},ft,${hash},KLAYTN,${symbol},${from},${to},${value},0,0\r\n`
    }
      console.log(makeCsv);
  };

  function setFile(event) {
    // Get the details of the files
    console.log(event.target.files[0])
    let fileReader = new FileReader();
    fileReader.onload = () => {
      setCsvfile(fileReader.result)
    };
    fileReader.readAsText(event.target.files[0]);
  }
  return (
    <div className="App">
      <header>
        <div>
            <button style={{width:'100px',height:'100px'}} onClick={connectklaytnWellet}>1. 지갑연결</button> <br /><br />
            <button style={{width:'100px',height:'100px'}} onClick={연속민트}>2. 연속민팅</button>
            <button style={{width:'100px',height:'100px'}} onClick={mint}>2. 조건맞을때 사인창</button>
            <button style={{width:'100px',height:'100px'}} onClick={mint2}>2. 사인창 무조건열림</button>
            <button style={{width:'100px',height:'100px'}} onClick={noSignSendTx}>2. 사인없이 트잭보내기</button>
            <button style={{width:'100px',height:'100px'}} onClick={findTokenNum}>3. 보유중인 nft다찾기</button>
            <button style={{width:'100px',height:'100px'}} onClick={뽑기}>3. 뽑기</button><br />
            <input type="file" name="docx" onChange={setFile.bind(this)} />
            <button style={{width:'100px',height:'100px'}} onClick={ttttttt}>3. 회계자료 덤프파일만들기</button>
        </div>
      </header>
    </div>
  );
}

export default Test;
